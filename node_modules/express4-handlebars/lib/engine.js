// Generated by CoffeeScript 1.7.1
(function() {
  var basename, dirname, engine, extname, fs, glob, handlebars, isAbsolute, join, resolve, _, _ref;

  fs = require('fs');

  _ref = require('path'), join = _ref.join, extname = _ref.extname, dirname = _ref.dirname, resolve = _ref.resolve, basename = _ref.basename;

  handlebars = require('handlebars');

  _ = require('underscore');

  glob = require('glob');

  module.exports = engine = (function() {
    var self, _settings;

    self = engine;

    _settings = {
      extname: '.hbs',
      useLayout: true,
      layout: 'layout',
      partials_dir: null,
      layout_dir: null,
      helpers: {}
    };

    engine.get = function(name) {
      if (name != null) {
        return _settings[name];
      } else {
        return _.clone(_settings);
      }
    };

    engine.set = function(name, value) {
      var k, sets, v, _results;
      sets = {};
      if (typeof name === 'string' && (value != null)) {
        sets[name] = value;
      } else if (typeof name === 'object') {
        sets = name;
      } else {
        return this;
      }
      _results = [];
      for (k in sets) {
        v = sets[k];
        _results.push(_settings[k] = v);
      }
      return _results;
    };

    function engine(path, options, fn) {
      var that;
      that = this;
      options.fileName = path;
      if (options.layout !== false && self.get('useLayout') === true) {
        options.layout = self.get('layout');
      }
      if (options.partials == null) {
        options.partials = {};
      }
      if (options.helpers == null) {
        options.helpers = {};
      }
      glob(join(self.get('partials_dir'), '**', '*' + extname(path)), function(err, files) {
        var file, n, name, partials, _i, _j, _len, _len1, _ref1;
        if (err) {
          throw err;
        }
        if (_.isArray(options.partials)) {
          partials = {};
          _ref1 = options.partials;
          for (_i = 0, _len = _ref1.length; _i < _len; _i++) {
            n = _ref1[_i];
            partials[n] = n;
          }
          options.partials = partials;
        }
        if (files != null) {
          partials = {};
          for (_j = 0, _len1 = files.length; _j < _len1; _j++) {
            file = files[_j];
            name = basename(file);
            name = name.substr(0, name.length - extname(path).length);
            partials[name] = file;
          }
          _.defaults(options.partials, partials);
        }
        return that.read_partials_and_layout(path, options, function(err) {
          if (err) {
            return fn(err);
          }
          return that.read(path, options, function(err, str) {
            if (err) {
              return fn(err);
            }
            return that.render(str, options, fn);
          });
        });
      });
    }

    engine.prototype.render = function(str, options, fn) {
      var helper, helpers, name, partial, partials, template;
      partials = options.partials;
      helpers = _.defaults(options.helpers, self.get('helpers'));
      for (name in partials) {
        partial = partials[name];
        handlebars.registerPartial(name, partial);
      }
      for (name in helpers) {
        helper = helpers[name];
        handlebars.regitserHelper(name, helper);
      }
      if (typeof options.layout === 'string') {
        handlebars.registerPartial('yield', str);
        template = handlebars.compile(options.layout);
      } else {
        template = handlebars.compile(str);
      }
      return fn(null, template(options));
    };

    engine.prototype.read_partials_and_layout = function(path, options, fn) {
      var file_ext, keys, layout, names, next, partials, that;
      that = this;
      partials = options.partials;
      file_ext = extname(path || self.get('extname'));
      options.partials = {};
      names = _.clone(partials);
      keys = Object.keys(names);
      if (typeof options.layout === 'string') {
        layout = extname(options.layout === file_ext) ? options.layout : options.layout + file_ext;
        if (!isAbsolute(layout)) {
          layout = join(self.get('layout_dir'), layout);
        }
      }
      next = function(index) {
        var file, key, name;
        if (index === keys.length) {
          return fn(null);
        }
        key = keys[index];
        name = extname(names[key]) === file_ext ? names[key] : names[key] + file_ext;
        file = isAbsolute(name) ? name : join(dirname(path), name);
        that.read(file, options, function(err, str) {
          if (err) {
            return fn(err);
          }
          options.partials[key] = str;
          return next(++index);
        });
        return null;
      };
      if (layout) {
        return this.read(layout, options, function(err, str) {
          if (err) {
            return fn(err);
          }
          options.layout = str;
          return next(0);
        });
      } else {
        return next(0);
      }
    };

    engine.prototype.read = function(path, options, fn) {
      return fs.readFile(path, 'utf8', function(err, str) {
        if (err) {
          return fn(err);
        }
        if (str[0] === '\uFEFF') {
          str = str.substr(1);
        }
        return fn(null, str);
      });
    };

    return engine;

  })();

  isAbsolute = function(path) {
    if ('/' === path[0]) {
      return true;
    }
    if (':' === path[1] && '\\' === path[2]) {
      return true;
    }
    if ('\\\\' === path.substring(0, 2)) {
      return true;
    }
    return false;
  };

}).call(this);
